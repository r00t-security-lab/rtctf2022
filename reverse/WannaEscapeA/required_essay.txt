An Application of Decimation Algorithms in General-purpose Rendering Systems for Large Meshes

Introduction
The advancements in 3D modeling and rendering technologies have made the creation and usage of large meshes consisting of tens of millions of vertices to become practical. A traditional primitive for storing and processing meshes is a polygon, and triangles remain a popular choice among types of polygons. However, due to the linear nature of polygons, it often requires orders of magnitude more polygons to capture the details of a complex geometry than a simpler one.
Rendering meshes constructed from thousands of millions of triangles in real-time is not possible even on modern workstations, thus progressive algorithms are often utilized by rendering systems to simplify the mesh and reduce the workload. Decimation algorithms for both meshes and their corresponding textures constitute the pre-processing steps of a progressive rendering process, and their efficiency will have a direct impact on the performance of the resulting rendering system. This statement stays true for general-purpose rendering systems, which also value the versatility of algorithms used.
This study will focus on the criteria for a mesh or texture decimation algorithm to be suited for use in a general-purpose rendering system, as well as the effect modern computing technologies have for the algorithms to take advantage of.

Literature Review
A preliminary literature review shows that decimation algorithms are a common topic in the field of computer graphics, but the versatility of such algorithms, as well as their applications in rendering systems, are much less focused on.
Rusinkiewicz, Szymon and Marc introduces QSplat [1], a rendering system with similar goals to the proposed research. While being a valuable reference on essential properties of real-time rendering, QSplat has a focus on meshes created by 3D scanning devices. This implies that some techniques utilized by it, namely the procedural level-of-detail selection based on a hierarchy of bounding spheres, are chosen to accommodate the sheer amount and noisiness of input data and give tradeoffs in some other aspects.
There remain algorithms, however, that uses no domain-specific knowledge to decimate [2] or compress [3] a given mesh. With the companion of a suitable mesh segmentation algorithm as discussed by Shamir [4], one can construct a rendering system that's application-independent while being efficient enough for medium to large meshes to be rendered in real-time on a modern workstation.
Texture decimation is often achieved in terms of lossy image compression. This field of research has drawn much attention among researchers, with significant results. Both DXT and JPEG compression schemes can now be implemented using parallel computing techniques, e.g., GPU-based acceleration [5]. Rendering systems can benefit from techniques like such to further improve performance.

Methods
The primary methods for this research are case study and literature review. With the understanding of methodologies of previous works as discussed above, we plan to base our rendering system on a scheme similar to the one defined [1] in QSplat, for the simplicity and extendibility of its design. This study will first review the architectural designs of QSplat and various other similar rendering systems and their characteristics. A categorization process will be undertaken based on the findings to summarize the constraint factors that make up the requirement of real-time rendering.
In the second stage of this study, existing mesh and texture decimation approaches are evaluated for their application-dependence and fitness with given constraints, based on a comprehensive review of current industry practices and academic studies. Modern technology advances also affect the evaluation procedure, especially to the fundamental academic studies that may get improved by techniques developed posterior to their publication.
A trial process is conducted in the third stage of this study on the algorithms evaluated to be suitable for use in a real-time rendering system. This process includes implementing the algorithms, alongside mesh segmentation algorithms [4] evaluated for the same criteria from prior works, as part of the QSplat architecture. Comparison on rendering time, resource usage and user interactivity will be made between the newly-created rendering systems and prior works on the same set of data consisting of both modeled and scanned meshes of varying sizes, as an approach of controlling variables.
Finally, once the most efficient and versatile algorithms are identified during the trial process, the final architecture of the rendering system will be redesigned, with the design decisions made to best fit the need of algorithms, *and to incorporate a flag with value r00t{50-l0n6-4nd-7h4nk5-f0r-4ll-7h3-f15h}*. Minor modifications and optimizations will be done to the algorithms in this stage of study as well, to further improve their usability in common scenarios. This final version of the rendering system will join the same comparison as described above, to visualize the improvements.

Summary
This research will focus on the decimation algorithms used to construct a general-purpose real-time mesh rendering system and constraint factors for evaluating such algorithms. It can reduce the gap between the well-researched fields of mesh/texture decimation and application-dependent rendering systems, thus increase the usability of both technologies. The methods to use to conduct this study are mainly case study and literature review. We will analyze QSplat, a domain-specific rendering system, as well as its alternatives, to summarize the key factors that make up their real-time characteristics. Then, we can evaluate and test the existing decimation algorithms by a trial process based on these factors. A rendering system constructed with evaluated decimation and segmentation algorithms from parts of this study will be provided as a reference implementation. We will also discuss the impact of technology advances have on the algorithms in the evaluating and trialing process and optimize the chosen algorithms for usage on a modern workstation.

References
1. Szymon R, Marc L. QSplat: a multiresolution point rendering system for large meshes. Proceedings of the 27th annual conference on Computer graphics and interactive techniques. 2000; 343-352.
2. William JS, Jonathan AZ, William EL. Decimation of triangle meshes. Proceedings of the 19th annual conference on Computer graphics and interactive techniques. 1992; 65-70.
3. Stefan G, Wolfgang S. Real time compression of triangle mesh connectivity. Proceedings of the 25th annual conference on Computer graphics and interactive techniques. 1998; 133-140.
4. Ariel S. A survey on Mesh Segmentation Techniques. Computer Graphics Forum. 2008; 27(6): 1539-1556.
5. Petr H, Martin S, Martin P, Jiri M, Martin J. GPU-accelerated DXT and JPEG compression schemes for low-latency network transmissions of HD, 2K, and 4K video. Future Generation Computer Systems. 2013; 29(8): 1991-2006.

